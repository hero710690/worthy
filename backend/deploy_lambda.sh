#!/bin/bash

# Worthy App Lambda Deployment Script
# This script deploys the backend using the pre-built lambda_deployment_full directory

set -e  # Exit on any error

echo "üöÄ Starting Worthy App Lambda Deployment..."

# Configuration
FUNCTION_NAME="worthy-api-development"
REGION="ap-northeast-1"
PROFILE="worthy-app-user"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check prerequisites
echo "üìã Checking prerequisites..."

# Check AWS CLI
if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI not found. Please install AWS CLI.${NC}"
    exit 1
fi

# Check AWS profile
if ! aws configure list-profiles | grep -q "$PROFILE"; then
    echo -e "${RED}‚ùå AWS profile '$PROFILE' not found.${NC}"
    exit 1
fi

# Verify AWS credentials
echo "üîê Verifying AWS credentials..."
if ! aws sts get-caller-identity --profile "$PROFILE" --region "$REGION" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå AWS credentials verification failed.${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ AWS credentials verified.${NC}"

# Check if lambda_deployment_full exists
if [ ! -d "lambda_deployment_full" ]; then
    echo -e "${RED}‚ùå lambda_deployment_full directory not found.${NC}"
    exit 1
fi

# Clean up previous builds
echo "üßπ Cleaning up previous builds..."
rm -f worthy-backend-full.zip

# Step 1: Update the main function file in lambda_deployment_full
echo "üìù Updating function code in deployment package..."
cp worthy_lambda_function.py lambda_deployment_full/

# Step 2: Create deployment package from lambda_deployment_full
echo "üì¶ Creating deployment package from lambda_deployment_full..."
cd lambda_deployment_full
zip -r ../worthy-backend-full.zip . -x "*.DS_Store" "*.pyc" "__pycache__/*"
cd ..

# Step 3: Update function code
echo "üöÄ Deploying to AWS Lambda..."
aws lambda update-function-code \
    --function-name "$FUNCTION_NAME" \
    --zip-file fileb://worthy-backend-full.zip \
    --profile "$PROFILE" \
    --region "$REGION" > /dev/null

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Function code updated successfully.${NC}"
else
    echo -e "${RED}‚ùå Function code update failed.${NC}"
    exit 1
fi

# Step 4: Update function configuration
echo "‚öôÔ∏è  Updating function configuration..."
aws lambda update-function-configuration \
    --function-name "$FUNCTION_NAME" \
    --handler worthy_lambda_function.lambda_handler \
    --timeout 30 \
    --memory-size 512 \
    --profile "$PROFILE" \
    --region "$REGION" > /dev/null

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Function configuration updated successfully.${NC}"
else
    echo -e "${RED}‚ùå Function configuration update failed.${NC}"
    exit 1
fi

# Step 5: Test deployment
echo "üß™ Testing deployment..."
API_URL="https://mreda8g340.execute-api.ap-northeast-1.amazonaws.com/development"

# Wait a moment for deployment to propagate
echo "‚è≥ Waiting for deployment to propagate..."
sleep 5

# Test health endpoint
echo "üè• Testing health endpoint..."
HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health")
if [ "$HEALTH_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Health check passed.${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Health check returned status: $HEALTH_RESPONSE${NC}"
fi

# Test stock prices endpoint
echo "üìà Testing stock prices endpoint..."
STOCK_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/api/stock-prices-multi?symbols=AAPL")
if [ "$STOCK_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ Stock prices endpoint working.${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Stock prices endpoint returned status: $STOCK_RESPONSE${NC}"
fi

# Clean up build artifacts
echo "üßπ Cleaning up build artifacts..."
rm -f worthy-backend-full.zip

echo ""
echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"
echo ""
echo "üìä Deployment Summary:"
echo "  ‚Ä¢ Function: $FUNCTION_NAME"
echo "  ‚Ä¢ Region: $REGION"
echo "  ‚Ä¢ API URL: $API_URL"
echo ""
echo "üîó Test your API:"
echo "  ‚Ä¢ Health: curl $API_URL/health"
echo "  ‚Ä¢ Stock Prices: curl \"$API_URL/api/stock-prices-multi?symbols=AAPL,TSLA\""
echo ""
echo -e "${GREEN}‚úÖ Ready to use!${NC}"
